/**
 * This file is part of NodeJS SMPP library
 *
 * @author Kaspars Foigts <laacz@laacz.lv>
 * @license The MIT License
 * @copyright Copyright(c) 2011 - present Kaspars Foigts <laacz@laacz.lv>
 */

var PDUFactory = require('../lib/pdu-factory.js');
var Constants = require('../lib/constants.js');
var Defs = Constants.defs;
var Assert = require('assert');

var octets;
var params = {};

// Malformed PDUs
PDUFactory.fromBuffer('', function(err, pdu) { Assert.ok(err.message !== undefined); console.log('[ok]', err.message);});
octets = [0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00].map(function(a){return String.fromCharCode(a);}).join('');
PDUFactory.fromBuffer(octets, function(err, pdu) { Assert.ok(err.message !== undefined); console.log('[ok]', err.message);});
octets = [0x00, 0x00, 0x00, 0x10, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01].map(function(a){return String.fromCharCode(a);}).join('');
PDUFactory.fromBuffer(Buffer(octets, 'binary'), function(err, pdu) { Assert.ok(err.message !== undefined); console.log('[ok]', err.message);});
octets = [0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x01].map(function(a){return String.fromCharCode(a);}).join('');
PDUFactory.fromBuffer(Buffer(octets, 'binary'), function(err, pdu) { Assert.ok(err.message !== undefined); console.log('[ok]', err.message);});
octets = [0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01].map(function(a){return String.fromCharCode(a);}).join('');
PDUFactory.fromBuffer(Buffer(octets, 'binary'), function(err, pdu) { Assert.ok(err.message !== undefined); console.log('[ok]', err.message);});

// Correct bind_transceiver
octets = [0x00, 0x00, 0x00, 0x2b, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x9b, 0x6, 0x66, 0x66, 0x6f, 0x6f, 0x66, 0x6f, 0x6f, 0x66, 0x6f, 0x00, 0x62, 0x61, 0x72, 0x62, 0x61, 0x72, 0x62, 0x00, 0x45, 0x53, 0x4d, 0x45, 0x00, 0x34, 0x00, 0x00, 0x00].map(function(a){return String.fromCharCode(a);}).join('');
PDUFactory.fromBuffer(Buffer(octets, 'binary'), function(err, pdu) { Assert.ok(err === null); console.log('[ok]', pdu.command_name, pdu.command_status_name);});

// Correct submit_sm
octets = [0x00, 0x00, 0x00, 0xa6, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0xa6, 0xf9, 0x00, 0x05, 0x00, 0x4b, 0x4b, 0x4b, 0x4b, 0x4b, 0x20, 0x4b, 0x4b, 0x4b, 0x4b, 0x00, 0x01, 0x00, 0x33, 0x37, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x00, 0x00, 0x00, 0x03, 0x00, 0x30, 0x30, 0x30, 0x30, 0x30, 0x37, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x52, 0x00, 0x01, 0x00, 0x00, 0x00, 0x54, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x15, 0x05, 0x00, 0x02, 0x54, 0x53, 0x15, 0x03, 0x00, 0x02, 0x00, 0xab].map(function(a){return String.fromCharCode(a);}).join('');

PDUFactory.fromBuffer(Buffer(octets, 'binary'), function(err, pdu) { Assert.ok(err === null); console.log('[ok]', pdu.command_name, pdu.command_status_name);});


// Sanity checks
PDUFactory.fromStruct(-1, -1, -1, {}, function(err, pdu) { Assert.ok(err.message !== undefined); console.log('[ok]', err.message);});
PDUFactory.fromStruct(4, -1, -1, {}, function(err, pdu) { Assert.ok(err.message !== undefined); console.log('[ok]', err.message);});
PDUFactory.fromStruct(4, 0, -1, {}, function(err, pdu) { Assert.ok(err.message !== undefined); console.log('[ok]', err.message);});

PDUFactory.fromStruct(0x80000009, 0, -1, {'system_id': 'sys'}, function(err, pdu) { Assert.ok(err === null); console.log('[ok]', pdu.command_name, pdu.command_status_name);});

PDUFactory.fromStruct(0x80000009, 0, -1, {'system_id': 'sys', 'additional_status_info_text' : 'foobar'}, function(err, pdu) { Assert.ok(pdu.optional.additional_status_info_text === 'foobar'); console.log('[ok]', pdu.command_name, pdu.command_status_name);});


// There and back again
var bufs = [
            [0x00, 0x00, 0x00, 0x2b, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x9b, 0x6f, 0x66, 0x66, 0x6f, 0x6f, 0x66, 0x66, 0x6f, 0x6f, 0x66, 0x00, 0x62, 0x61, 0x72, 0x62, 0x61, 0x72, 0x61, 0x00, 0x45, 0x53, 0x4d, 0x45, 0x00, 0x34, 0x00, 0x00, 0x00].map(function(a){return String.fromCharCode(a);}).join(''),
            [0x00, 0x00, 0x00, 0xa6, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0xa6, 0xf9, 0x00, 0x05, 0x00, 0x4b, 0x4b, 0x4b, 0x4b, 0x4b, 0x20, 0x4b, 0x4b, 0x4b, 0x4b, 0x00, 0x01, 0x00, 0x33, 0x37, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x00, 0x00, 0x00, 0x03, 0x00, 0x30, 0x30, 0x30, 0x30, 0x30, 0x37, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x52, 0x00, 0x01, 0x00, 0x00, 0x00, 0x54, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x15, 0x05, 0x00, 0x02, 0x54, 0x53, 0x15, 0x03, 0x00, 0x02, 0x00, 0xab].map(function(a){return String.fromCharCode(a);}).join('')
           ];

var buf = '';
for (buf in bufs) {
    octets = bufs[buf];
    PDUFactory.fromBuffer(Buffer(octets, 'binary'), function(err, pdu) {
        var k = '';
        Assert.ok(err === null);
        params = pdu.mandatory;
        for (k in pdu.optional) {
            params[k] = pdu.optional[k];
        }

        PDUFactory.fromStruct(pdu.header.command_id, pdu.header.command_status, pdu.header.sequence_number, params, function(err, pdu2) {
            if (err) { console.log(err); }
            Assert.ok(pdu2.buffer.toString() === pdu.buffer.toString());
        });
    });
}
// console.log(msg.split('').reduce(function(a, b){ return (a.length == 1 ? '\\x' + a.charCodeAt(0).toString(16) : a) + '\\x' + b.charCodeAt(0).toString(16);}))

var command_id;
for (command_id in Constants.command_ids) {
    console.log('Testing for definition for', Constants.command_ids[command_id], '0x' + (command_id>>>0).toString(16));
    Assert.ok(Defs.commands[command_id] !== undefined);
}