/**
 * This file is part of NodeJS SMPP library
 *
 * @author Kaspars Foigts <laacz@laacz.lv>
 * @license The MIT License
 * @copyright Copyright(c) 2011 - present Kaspars Foigts <laacz@laacz.lv>
 */

var PDUFactory = require('pdu-factory');
var Constants = require('constants');
var Defs = Constants.defs;
var Assert = require('assert');

var octets;
var params = {};

function toString(array) {
    return array.map(function(a){return String.fromCharCode(a);}).join('');
}

module.exports = {

    'Malformed PDU octet streams': function() {
        // Malformed PDUs
        PDUFactory.fromBuffer('', function(err, pdu) { Assert.ok(err.message !== undefined);});
        octets = toString([0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);
        PDUFactory.fromBuffer(octets, function(err, pdu) { Assert.ok(err.message !== undefined); });
        octets = toString([0x00, 0x00, 0x00, 0x10, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01]);
        PDUFactory.fromBuffer(Buffer(octets, 'binary'), function(err, pdu) { Assert.ok(err.message !== undefined); });
        octets = toString([0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x01]);
        PDUFactory.fromBuffer(Buffer(octets, 'binary'), function(err, pdu) { Assert.ok(err.message !== undefined); });
        octets = toString([0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01]);
        PDUFactory.fromBuffer(Buffer(octets, 'binary'), function(err, pdu) { Assert.ok(err.message !== undefined); });
    },

    'Well formed PDU octet streams': function() {
        // Correct bind_transceiver
        octets = toString([0x00, 0x00, 0x00, 0x2b, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x9b, 0x6, 0x66, 0x66, 0x6f, 0x6f, 0x66, 0x6f, 0x6f, 0x66, 0x6f, 0x00, 0x62, 0x61, 0x72, 0x62, 0x61, 0x72, 0x62, 0x00, 0x45, 0x53, 0x4d, 0x45, 0x00, 0x34, 0x00, 0x00, 0x00]);
        PDUFactory.fromBuffer(Buffer(octets, 'binary'), function(err, pdu) { Assert.ok(err === null); });

        // Correct submit_sm
        octets = toString([0x00, 0x00, 0x00, 0xa6, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0xa6, 0xf9, 0x00, 0x05, 0x00, 0x4b, 0x4b, 0x4b, 0x4b, 0x4b, 0x20, 0x4b, 0x4b, 0x4b, 0x4b, 0x00, 0x01, 0x00, 0x33, 0x37, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x00, 0x00, 0x00, 0x03, 0x00, 0x30, 0x30, 0x30, 0x30, 0x30, 0x37, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x52, 0x00, 0x01, 0x00, 0x00, 0x00, 0x54, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x15, 0x05, 0x00, 0x02, 0x54, 0x53, 0x15, 0x03, 0x00, 0x02, 0x00, 0xab]);

        PDUFactory.fromBuffer(Buffer(octets, 'binary'), function(err, pdu) { Assert.ok(err === null); });
    },

    'Sanity tests': function() {
        // Sanity checks
        PDUFactory.fromStruct(-1, -1, -1, {}, function(err, pdu) { Assert.ok(err.message !== undefined); });
        PDUFactory.fromStruct(4, -1, -1, {}, function(err, pdu) { Assert.ok(err.message !== undefined); });
        PDUFactory.fromStruct(4, 0, -1, {}, function(err, pdu) { Assert.ok(err.message !== undefined); });

        PDUFactory.fromStruct(0x80000009, 0, -1, {'system_id': 'sys'}, function(err, pdu) { Assert.ok(err === null); });

        PDUFactory.fromStruct(0x80000009, 0, -1, {'system_id': 'sys', 'additional_status_info_text' : 'foobar'}, function(err, pdu) { Assert.ok(pdu.optional.additional_status_info_text === 'foobar'); });


    },

    'Octet stream -> Struct -> Octet stream': function() {
        // There and back again
        var bufs = [
                    toString([0x00, 0x00, 0x00, 0x2b, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x9b, 0x6f, 0x66, 0x66, 0x6f, 0x6f, 0x66, 0x66, 0x6f, 0x6f, 0x66, 0x00, 0x62, 0x61, 0x72, 0x62, 0x61, 0x72, 0x61, 0x00, 0x45, 0x53, 0x4d, 0x45, 0x00, 0x34, 0x00, 0x00, 0x00]),
                    toString([0x00, 0x00, 0x00, 0xa6, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0xa6, 0xf9, 0x00, 0x05, 0x00, 0x4b, 0x4b, 0x4b, 0x4b, 0x4b, 0x20, 0x4b, 0x4b, 0x4b, 0x4b, 0x00, 0x01, 0x00, 0x33, 0x37, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x00, 0x00, 0x00, 0x03, 0x00, 0x30, 0x30, 0x30, 0x30, 0x30, 0x37, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x52, 0x00, 0x01, 0x00, 0x00, 0x00, 0x54, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x15, 0x05, 0x00, 0x02, 0x54, 0x53, 0x15, 0x03, 0x00, 0x02, 0x00, 0xab])
                   ];

        function encodeAndCheck(err, pdu) {
            var k = '';
            Assert.ok(err === null);
            params = pdu.mandatory;
            for (k in pdu.optional) {
                params[k] = pdu.optional[k];
            }

            PDUFactory.fromStruct(pdu.header.command_id, pdu.header.command_status, pdu.header.sequence_number, params, function(err, pdu2) {
                Assert.ok(pdu2.buffer.toString() === pdu.buffer.toString());
            });
        }

        var buf = '';
        for (buf in bufs) {
            octets = bufs[buf];
            PDUFactory.fromBuffer(Buffer(octets, 'binary'), encodeAndCheck);
        }
        // console.log(msg.split('').reduce(function(a, b){ return (a.length == 1 ? '\\x' + a.charCodeAt(0).toString(16) : a) + '\\x' + b.charCodeAt(0).toString(16);}))


    }

};
